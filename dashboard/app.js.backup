// SSE Connection with auto-reconnect
let eventSource = null;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 5;

// Update timestamp
function updateTimestamp() {
    const now = new Date().toLocaleTimeString();
    document.getElementById('timestamp').textContent = now;
}

// Add log entry
function addLog(message, type = 'info') {
    const logContainer = document.getElementById('log');
    const entry = document.createElement('div');
    entry.className = `log-entry ${type}`;
    entry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
    logContainer.appendChild(entry);
    logContainer.scrollTop = logContainer.scrollHeight;
}

// Update coverage circle
function updateCoverage(percentage) {
    const circle = document.getElementById('coverage-circle');
    const text = document.getElementById('coverage-text');
    const circumference = 314;
    const offset = circumference - (percentage / 100) * circumference;
    
    circle.style.strokeDashoffset = offset;
    text.textContent = `${percentage}%`;
    
    if (percentage >= 85) {
        circle.style.stroke = '#4caf50';
    } else if (percentage >= 70) {
        circle.style.stroke = '#ff9800';
    } else {
        circle.style.stroke = '#f44336';
    }
}

// Update badge
function updateBadge(elementId, status) {
    const element = document.getElementById(elementId);
    if (!element) return;
    
    element.className = 'badge';
    
    if (status === 'success' || status === 'passed' || status === 'completed') {
        element.style.background = '#4caf50';
        element.style.color = 'white';
        element.textContent = '✓ Passed';
    } else if (status === 'failed' || status === 'error') {
        element.style.background = '#f44336';
        element.style.color = 'white';
        element.textContent = '✗ Failed';
    } else if (status === 'running' || status === 'in_progress') {
        element.style.background = '#2196f3';
        element.style.color = 'white';
        element.textContent = '⋯ Running';
    } else if (status === 'triggered') {
        element.style.background = '#ff9800';
        element.style.color = 'white';
        element.textContent = '🚀 Triggered';
    } else {
        element.style.background = '#e0e0e0';
        element.style.color = '#666';
        element.textContent = status || 'Pending';
    }
}

// Reset dashboard
function resetDashboard() {
    if (!confirm('Reset dashboard? This will clear all current data.')) {
        return;
    }
    
    document.getElementById('spec-file').textContent = '-';
    document.getElementById('endpoint-count').textContent = '0';
    document.getElementById('tests-generated').textContent = '0';
    document.getElementById('tests-passed').textContent = '0';
    document.getElementById('tests-failed').textContent = '0';
    document.getElementById('tests-total').textContent = '0';
    document.getElementById('contracts-tested').textContent = '0';
    document.getElementById('contracts-passed').textContent = '0';
    document.getElementById('contracts-failed').textContent = '0';
    document.getElementById('git-repo').textContent = '-';
    document.getElementById('build-status').textContent = '-';
    
    updateBadge('parse-status', 'Pending');
    updateBadge('gen-status', 'Pending');
    updateBadge('syntax-check', 'Pending');
    updateBadge('import-check', 'Pending');
    updateBadge('validation-status', 'Pending');
    updateBadge('git-commit', 'Pending');
    updateBadge('git-push', 'Pending');
    updateBadge('cicd-status', 'Not Started');
    
    document.getElementById('gen-progress').style.width = '0%';
    updateCoverage(0);
    
    document.getElementById('comparison-section').style.display = 'none';
    document.getElementById('log').innerHTML = '';
    
    document.getElementById('status').textContent = 'Dashboard reset';
    
    // HIDE buttons
    document.getElementById('coverage-btn').style.display = 'none';
    document.getElementById('tests-btn').style.display = 'none';
    
    addLog('Dashboard reset - ready for new POC run', 'info');
}

// Handle SSE events - wrapped in connectSSE function
function connectSSE() {
    if (eventSource) {
        eventSource.close();
    }
    
    eventSource = new EventSource('/events');
    
    eventSource.onopen = function() {
        reconnectAttempts = 0;
        document.getElementById('status').textContent = 'Connected - Ready';
        console.log('✅ SSE Connected');
    };

eventSource.onmessage = function(event) {
    const data = JSON.parse(event.data);
    updateTimestamp();
    
    switch(data.type) {
        case 'connected':
            addLog('Connected to dashboard', 'info');
            break;
            
        case 'clear':
            // HIDE buttons on new run
            document.getElementById('coverage-btn').style.display = 'none';
            document.getElementById('tests-btn').style.display = 'none';
            addLog('Starting new POC run...', 'info');
            break;
            
        case 'status':
            document.getElementById('status').textContent = data.message;
            addLog(data.message, 'info');
            break;
            
        case 'parse':
            document.getElementById('spec-file').textContent = data.file || 'specs/aadhaar-api.yaml';
            document.getElementById('endpoint-count').textContent = data.endpoints || 0;
            updateBadge('parse-status', 'success');
            addLog(`Discovered ${data.endpoints || 0} API endpoints ready for test generation`, 'success');
            break;
        
        case 'test_created':
            // Real-time individual test creation notification
            const testNum = data.test_number;
            const testName = data.test_name;
            document.getElementById('tests-generated').textContent = testNum;
            addLog(`Test ${testNum}: ${testName}`, 'info');
            break;
            
        case 'generate':
            const progress = data.progress || 0;
            document.getElementById('gen-progress').style.width = progress + '%';
            
            if (data.count > 0) {
                document.getElementById('tests-generated').textContent = data.count;
            }
            
            updateBadge('gen-status', data.status || 'running');
            
            if (data.message) {
                addLog(data.message, data.status === 'success' ? 'success' : 'info');
            }
            
            // SHOW "View Generated Tests" button when generation complete
            if (data.status === 'success' && data.count > 0) {
                document.getElementById('tests-btn').style.display = 'inline-block';
                addLog('Test generation complete - test file is ready for review', 'success');
            }
            break;
            
        case 'validate':
            updateBadge('syntax-check', data.syntax ? 'success' : 'failed');
            updateBadge('import-check', data.imports ? 'success' : 'failed');
            updateBadge('validation-status', data.overall ? 'success' : 'failed');
            addLog(data.message, data.overall ? 'success' : 'error');
            break;
            
        case 'execute':
            document.getElementById('tests-passed').textContent = data.passed || 0;
            document.getElementById('tests-failed').textContent = data.failed || 0;
            document.getElementById('tests-total').textContent = data.total || 0;
            
            const statusText = `Tests: ${data.passed || 0}/${data.total || 0} passed`;
            addLog(statusText, data.failed === 0 ? 'success' : 'error');
            
            // Show test details if available
            if (data.details && data.details.length > 0) {
                const detailsCard = document.getElementById('test-details-card');
                if (detailsCard) {
                    detailsCard.style.display = 'block';
                    
                    const detailsList = document.getElementById('test-details-list');
                    detailsList.innerHTML = '';
                    
                   data.details.forEach((detail) => {
                        const detailDiv = document.createElement('div');
                        detailDiv.className = detail.passed ? 'test-detail-item passed' : 'test-detail-item failed';
                        
                        const icon = detail.passed ? '✅' : '❌';
                        const statusClass = detail.passed ? 'status-passed' : 'status-failed';
                        const statusText = detail.passed ? 'PASSED' : 'FAILED';
                        
                        detailDiv.innerHTML = `
                            <div class="test-detail-header">
                                <span class="test-icon">${icon}</span>
                                <span class="test-name">${detail.name}</span>
                                <span class="test-status ${statusClass}">${statusText}</span>
                            </div>
                            <div class="test-reason">${detail.reason}</div>
                        `;
                        detailsList.appendChild(detailDiv);
                    });
                }
            }
            break;
            
        case 'coverage':
            const percentage = data.percentage || 0;
            updateCoverage(percentage);
            addLog(`Coverage: ${percentage}%`, percentage >= 85 ? 'success' : 'info');
            
            // SHOW "View Coverage Report" button when coverage complete
            if (percentage > 0) {
                document.getElementById('coverage-btn').style.display = 'inline-block';
                addLog('✅ Coverage report ready - click "View Coverage Report"', 'success');
            }
            break;
            
        case 'contract':
            document.getElementById('contracts-tested').textContent = data.total || 0;
            document.getElementById('contracts-passed').textContent = data.passed || 0;
            document.getElementById('contracts-failed').textContent = data.failed || 0;
            
            if (data.status === 'completed') {
                addLog(`Contract tests: ${data.passed || 0}/${data.total || 0} passed`, 
                       data.failed === 0 ? 'success' : 'error');
            }
            break;
            
        case 'git':
            document.getElementById('git-repo').textContent = 'Initialized';
            updateBadge('git-commit', data.committed ? 'success' : 'pending');
            updateBadge('git-push', data.pushed ? 'success' : 'pending');
            addLog(data.message, data.committed ? 'success' : 'info');
            break;
            
        case 'cicd':
            updateBadge('cicd-status', data.status);
            document.getElementById('build-status').textContent = data.build || '-';
            addLog(data.message, data.status === 'success' ? 'success' : 'info');
            break;
            
        case 'comparison':
            document.getElementById('comparison-section').style.display = 'block';
            
            document.getElementById('before-effort').textContent = data.before.manual_effort;
            document.getElementById('before-tests').textContent = data.before.test_cases;
            document.getElementById('before-coverage').textContent = data.before.coverage;
            
            document.getElementById('after-time').textContent = data.after.ai_time;
            document.getElementById('after-tests').textContent = data.after.test_cases;
            document.getElementById('after-lines').textContent = data.after.lines_of_code;
            
            addLog('Comparison: Manual vs AI automation', 'success');
            break;
            
        case 'error':
            addLog(`Error: ${data.message}`, 'error');
            break;
    }
};

eventSource.onerror = function(error) {
    console.error('SSE Error:', error);
    document.getElementById('status').textContent = 'Connection lost - Reconnecting...';
    addLog('Connection lost. Attempting to reconnect...', 'error');
    
    // Close existing connection
    if (eventSource) {
        eventSource.close();
    }
    
    // Retry connection with backoff
    reconnectAttempts++;
    if (reconnectAttempts <= MAX_RECONNECT_ATTEMPTS) {
        const delay = Math.min(1000 * reconnectAttempts, 5000);
        console.log(`Reconnecting in ${delay}ms (attempt ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})`);
        setTimeout(() => {
            addLog(`Reconnecting... (attempt ${reconnectAttempts})`, 'info');
            connectSSE();
        }, delay);
    } else {
        addLog('Max reconnection attempts reached. Please refresh the page.', 'error');
    }
};
}

// Initialize connection
connectSSE();

// Handle page visibility - reconnect when page becomes visible
document.addEventListener('visibilitychange', function() {
    if (!document.hidden && eventSource && eventSource.readyState === EventSource.CLOSED) {
        addLog('Page visible - reconnecting...', 'info');
        reconnectAttempts = 0;
        connectSSE();
    }
});

// Initialize
updateTimestamp();
setInterval(updateTimestamp, 1000);
addLog('Dashboard initialized', 'info');

// HIDE buttons initially
document.getElementById('coverage-btn').style.display = 'none';
document.getElementById('tests-btn').style.display = 'none';