name: AI-Generated Tests CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'tests/**'
      - 'api/**'
      - 'specs/**/*.yaml'
      - 'specs/**/*.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'tests/**'
      - 'api/**'
      - 'specs/**/*.yaml'
      - 'specs/**/*.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check for spec changes and regenerate tests
      id: regenerate
      run: |
        echo "🔍 Checking for API specification changes..."
        
        # Run main.py to detect changes and regenerate tests if needed
        python main.py specs/aadhaar-api.yaml || true
        
        # Check if new test file was generated
        if git diff --name-only | grep -q "tests/"; then
          echo "✅ Tests regenerated due to spec changes"
          echo "regenerated=true" >> $GITHUB_OUTPUT
        else
          echo "ℹ️  No test regeneration needed"
          echo "regenerated=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit regenerated tests
      if: steps.regenerate.outputs.regenerated == 'true'
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        git add tests/ .spec_version_*
        git commit -m "🤖 Auto-regenerate tests for spec changes [skip ci]"
        git push
    
    - name: Start Dummy API
      run: |
        cd api
        nohup python dummy_aadhaar_api.py > api.log 2>&1 &
        echo $! > api.pid
        sleep 5
    
    - name: Verify API is running
      run: |
        curl -f http://localhost:5001/health || (cat api/api.log && exit 1)
        echo "✅ API is running"
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=api --cov-report=html --cov-report=term --cov-report=json --cov-report=xml
      continue-on-error: false
    
    - name: Check coverage threshold
      run: |
        python << EOF
        import json
        with open('coverage.json') as f:
            data = json.load(f)
            coverage = data['totals']['percent_covered']
            print(f"Coverage: {coverage}%")
            if coverage < 85:
                print(f"❌ Coverage {coverage}% is below 85% threshold")
                exit(1)
            else:
                print(f"✅ Coverage {coverage}% meets threshold")
        EOF
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-html-report
        path: htmlcov/
        retention-days: 30
    
    - name: Upload coverage data
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-data
        path: |
          coverage.json
          coverage.xml
          .coverage
        retention-days: 30
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pytest-results
        path: |
          tests/
        retention-days: 30
    
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          
          try {
            const coverage = JSON.parse(fs.readFileSync('coverage.json', 'utf8'));
            const percentage = coverage.totals.percent_covered.toFixed(1);
            const passed = percentage >= 85 ? '✅' : '❌';
            
            const body = `## 🤖 AI-Generated Test Results
            
            ${passed} **Coverage: ${percentage}%** (Target: ≥85%)
            
            **Test Statistics:**
            - Lines covered: ${coverage.totals.covered_lines}/${coverage.totals.num_statements}
            - Missing lines: ${coverage.totals.missing_lines}
            - Branches: ${coverage.totals.covered_branches}/${coverage.totals.num_branches}
            
            **Build Information:**
            - Run: [#${context.runNumber}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - Commit: ${context.sha.substring(0, 7)}
            - Branch: ${context.ref.replace('refs/heads/', '')}
            
            [📊 View Full Coverage Report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          } catch (error) {
            console.log('Could not post comment:', error.message);
          }
    
    - name: Stop API
      if: always()
      run: |
        if [ -f api/api.pid ]; then
          kill $(cat api/api.pid) || true
        fi
    
    - name: Generate summary
      if: always()
      run: |
        echo "### 🧪 Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f coverage.json ]; then
          COVERAGE=$(python -c "import json; print(json.load(open('coverage.json'))['totals']['percent_covered'])")
          echo "- Coverage: **${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "- Status: ✅ Pipeline completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 [View detailed report in artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY